///usr/bin/env jbang "$0" "$@" ; exit $?

//DEPS org.apache.kafka:kafka-clients:3.7.0
//DEPS info.picocli:picocli:4.2.0
//DEPS com.fasterxml.jackson.core:jackson-databind:2.13.0


import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.format.DateTimeFormatter;
import java.time.Instant;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.serialization.StringSerializer;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Model.CommandSpec;
import picocli.CommandLine.ParameterException;
import picocli.CommandLine.Spec;

@Command(name = "inject-data", 
         mixinStandardHelpOptions = true, 
         version = "inject-data 0.1", 
         description = "inject-data made with jbang")
public class InjectData implements Callable<Integer> {
    
    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S").withZone(ZoneId.systemDefault());

    @Spec CommandSpec spec;

    static record FlowInfo (double lat, 
                            @JsonProperty("long") double lon, 
                            int flow, 
                            int period, 
                            int accuracy, 
                            String timestamp, 
                            @JsonProperty("num_lanes") int numLanes) {
    }

    static record FlowData (String key, FlowInfo flow) {
        Flow flowData() {
            return new Flow(key.substring(0, key.lastIndexOf("/")),
                            key.substring(key.lastIndexOf("/") + 1),
                            Instant.from(formatter.parse(flow.timestamp())).toEpochMilli(),
                            flow.lat(), 
                            flow.lon(), 
                            flow.flow(), 
                            flow.period(), 
                            flow.accuracy(), 
                            flow.numLanes());
        }
    }

    static record SpeedInfo (double lat, 
                             @JsonProperty("long") double lon, 
                             int speed, 
                             int accuracy, 
                             String timestamp, 
                             @JsonProperty("num_lanes") int numLanes) {
    }

    static record SpeedData (String key, SpeedInfo speed) {
        Speed speedData() {
            return new Speed(key.substring(0, key.lastIndexOf("/")),
                             key.substring(key.lastIndexOf("/") + 1),
                             Instant.from(formatter.parse(speed.timestamp())).toEpochMilli(),
                             speed.lat(), 
                             speed.lon(), 
                             speed.speed(), 
                             speed.accuracy(), 
                             speed.numLanes());
        }
    }

    static record Speed (String measurementId, 
                         String internalId, 
                         long publishTimestamp, 
                         double latitude, 
                         double longitude, 
                         int speed, 
                         int accuracy, 
                         int numLanes) {
    }

    static record Flow (String measurementId, 
                        String internalId, 
                        long publishTimestamp, 
                        double latitude, 
                        double longitude, 
                        int flow, 
                        int period, 
                        int accuracy, 
                        int numLanes) {
    }

    private static List<Path> findAllFiles(Path folder, String extension) {
        var allFiles = new ArrayList<Path>();
        for(var file : folder.toFile().listFiles()) {
            if (file.isDirectory()) {
                allFiles.addAll(findAllFiles(file.toPath(), extension));
            } else if (file.getName().endsWith(extension)) {
                allFiles.add(file.toPath());
            }
        }
        return allFiles;
    }

    private static List<SpeedData> findSpeedData() {
        var objectMapper = new ObjectMapper();
        var geolocations = findAllFiles(Paths.get("data", "geolocation"), ".txt");
        return geolocations.stream()
                           .flatMap(file -> {
                                try {
                                    var speedData = new ArrayList<SpeedData>();
                                    for (var line : Files.readAllLines(file)) {
                                        var parts = line.split("=");
                                        if (parts.length == 2 && parts[1].contains("\"speed\"")) {
                                            speedData.add(new SpeedData(parts[0], objectMapper.readValue(parts[1], SpeedInfo.class)));
                                        }
                                    }
                                    return speedData.stream();
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    return null;
                                }
                            }).toList();
    }

    private static List<FlowData> findFlowData() {
        var objectMapper = new ObjectMapper();
        var geolocations = findAllFiles(Paths.get("data", "geolocation"), ".txt");
        return geolocations.stream()
                           .flatMap(file -> {
                                try {
                                    var flowData = new ArrayList<FlowData>();
                                    for (var line : Files.readAllLines(file)) {
                                        var parts = line.split("=");
                                        if (parts.length == 2 && parts[1].contains("\"flow\"")) {
                                            flowData.add(new FlowData(parts[0], objectMapper.readValue(parts[1], FlowInfo.class)));
                                        }
                                    }
                                    return flowData.stream();
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    return null;
                                }
                            }).toList();
    }

    public static void main(String... args) {
        int exitCode = new CommandLine(new InjectData()).execute(args);
        System.exit(exitCode);
    }

    public Integer call() {
        throw new ParameterException(spec.commandLine(), "Missing required subcommand");
    }

    @Command
    int geolocation() {
        var configs = new Properties();
        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "kafka-0:9092,kafka-1:9094,kafka-2:9096");
        configs.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configs.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configs.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG, 10485760);

        var producer = new KafkaProducer(configs);
        var objectMapper = new ObjectMapper();
        var executors = Executors.newFixedThreadPool(2);
        var running = new AtomicBoolean(true);
        Runtime.getRuntime()
               .addShutdownHook(new Thread(() ->{ 
                                    running.set(false);
                                    executors.shutdownNow();
                                }));
        while (running.get()) {
            var flowFuture = executors.submit(() -> findFlowData().stream()
                                                                .sequential()
                                                                .sorted(Comparator.comparing(f -> f.flow().timestamp(), String.CASE_INSENSITIVE_ORDER))
                                                                .forEach(flowData -> {
                                                                    try {
                                                                        System.out.println("Injecting data flow=" + flowData.flowData());
                                                                        var data = flowData.flowData();
                                                                        Future<RecordMetadata> sentMetadata = producer.send(new ProducerRecord("flow", 
                                                                                                                                            null,
                                                                                                                                            data.publishTimestamp(),
                                                                                                                                            flowData.key(), 
                                                                                                                                            objectMapper.writeValueAsString(data)));
                                                                        var metadata = sentMetadata.get();
                                                                        try {
                                                                            Thread.sleep(50);
                                                                        } catch (InterruptedException e) {
                                                                            Thread.currentThread().interrupt();
                                                                        }
                                                                        System.out.println("Sent metadata: partition=" + metadata.partition() + ", offset=" + metadata.offset());
                                                                    } catch (Exception e) {
                                                                        e.printStackTrace();
                                                                    }
                                                                }));
            var speedFuture = executors.submit(() -> findSpeedData().stream()
                                                                    .sequential()
                                                                    .sorted(Comparator.comparing(s -> s.speed().timestamp(), String.CASE_INSENSITIVE_ORDER))
                                                                    .forEach(speedData -> {
                                                                        try {
                                                                            System.out.println("Injecting data speed=" + speedData.speedData());
                                                                            var data = speedData.speedData();
                                                                            Future<RecordMetadata> sentMetadata = producer.send(new ProducerRecord("speed", 
                                                                                                                                                null, 
                                                                                                                                                data.publishTimestamp(),
                                                                                                                                                speedData.key(), 
                                                                                                                                                objectMapper.writeValueAsString(data)));
                                                                            var metadata = sentMetadata.get();
                                                                            try {
                                                                                Thread.sleep(50);
                                                                            } catch (InterruptedException e) {
                                                                                Thread.currentThread().interrupt();
                                                                            }
                                                                            System.out.println("Sent metadata: partition=" + metadata.partition() + ", offset=" + metadata.offset());
                                                                        } catch (Exception e) {
                                                                            e.printStackTrace();
                                                                        }
                                                                    }));

            try {
                flowFuture.get();
                speedFuture.get();
            } catch (ExecutionException ee) {
                throw new RuntimeException(ee);
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
            }
        }
        producer.close();
        executors.shutdown();
        return CommandLine.ExitCode.OK;
    }
}
